#include <GL/gl.h>
#include <GL/glut.h>
#include <GL/glu.h>
#include "./../include/ClientGui.h"

#include <stdlib.h>
#include <string.h>
int XSize = 800, YSize = 800;


GLubyte space[] =
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
GLubyte letters[][13] = {
    {0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xff, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18},
    {0x00, 0x00, 0xfe, 0xc7, 0xc3, 0xc3, 0xc7, 0xfe, 0xc7, 0xc3, 0xc3, 0xc7, 0xfe},
    {0x00, 0x00, 0x7e, 0xe7, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xe7, 0x7e},
    {0x00, 0x00, 0xfc, 0xce, 0xc7, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc7, 0xce, 0xfc},
    {0x00, 0x00, 0xff, 0xc0, 0xc0, 0xc0, 0xc0, 0xfc, 0xc0, 0xc0, 0xc0, 0xc0, 0xff},
    {0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xfc, 0xc0, 0xc0, 0xc0, 0xff},
    {0x00, 0x00, 0x7e, 0xe7, 0xc3, 0xc3, 0xcf, 0xc0, 0xc0, 0xc0, 0xc0, 0xe7, 0x7e},
    {0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xff, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3},
    {0x00, 0x00, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e},
    {0x00, 0x00, 0x7c, 0xee, 0xc6, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06},
    {0x00, 0x00, 0xc3, 0xc6, 0xcc, 0xd8, 0xf0, 0xe0, 0xf0, 0xd8, 0xcc, 0xc6, 0xc3},
    {0x00, 0x00, 0xff, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0},
    {0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xdb, 0xff, 0xff, 0xe7, 0xc3},
    {0x00, 0x00, 0xc7, 0xc7, 0xcf, 0xcf, 0xdf, 0xdb, 0xfb, 0xf3, 0xf3, 0xe3, 0xe3},
    {0x00, 0x00, 0x7e, 0xe7, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xe7, 0x7e},
    {0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xfe, 0xc7, 0xc3, 0xc3, 0xc7, 0xfe},
    {0x00, 0x00, 0x3f, 0x6e, 0xdf, 0xdb, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c},
    {0x00, 0x00, 0xc3, 0xc6, 0xcc, 0xd8, 0xf0, 0xfe, 0xc7, 0xc3, 0xc3, 0xc7, 0xfe},
    {0x00, 0x00, 0x7e, 0xe7, 0x03, 0x03, 0x07, 0x7e, 0xe0, 0xc0, 0xc0, 0xe7, 0x7e},
    {0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff},
    {0x00, 0x00, 0x7e, 0xe7, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3},
    {0x00, 0x00, 0x18, 0x3c, 0x3c, 0x66, 0x66, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3},
    {0x00, 0x00, 0xc3, 0xe7, 0xff, 0xff, 0xdb, 0xdb, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3},
    {0x00, 0x00, 0xc3, 0x66, 0x66, 0x3c, 0x3c, 0x18, 0x3c, 0x3c, 0x66, 0x66, 0xc3},
    {0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x3c, 0x66, 0x66, 0xc3},
    {0x00, 0x00, 0xff, 0xc0, 0xc0, 0x60, 0x30, 0x7e, 0x0c, 0x06, 0x03, 0x03, 0xff}
};


// Lower case
GLubyte lowletters[][13] = {
{0x00, 0x00, 0x7d, 0xc3, 0xc3, 0xc3, 0x7f, 0x03, 0x7e, 0x00, 0x00, 0x00, 0x00}, // a
{0x00, 0x00, 0xfe, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xfe, 0xc0, 0xc0, 0xc0, 0xc0}, // b
{0x00, 0x00, 0x7f, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x7f, 0x00, 0x00, 0x00, 0x00}, // c
{0x00, 0x00, 0x7f, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x7f, 0x03, 0x03, 0x03, 0x03}, // d
{0x00, 0x00, 0x7e, 0xc0, 0xc0, 0xfe, 0xc3, 0xc3, 0x7e, 0x00, 0x00, 0x00, 0x00}, // e
{0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x0e}, // f
{0x7f, 0x03, 0x7f, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x7e, 0x00, 0x00, 0x00, 0x00}, // g
{0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xfe, 0xc0, 0xc0, 0xc0, 0xc0}, // h
{0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00}, // i
{0x70, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00}, // j
{0x00, 0x00, 0xc3, 0xc7, 0xce, 0xfc, 0xfe, 0xc7, 0xc3, 0xc0, 0xc0, 0xc0, 0xc0}, // k
{0x00, 0x00, 0x0c, 0x1c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18}, // l
{0x00, 0x00, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xfe, 0x00, 0x00, 0x00, 0x00}, // m
{0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xfe, 0x00, 0x00, 0x00, 0x00}, // n
{0x00, 0x00, 0x7e, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x7e, 0x00, 0x00, 0x00, 0x00}, // o
{0xc0, 0xc0, 0xfe, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xfe, 0x00, 0x00, 0x00, 0x00}, // p
{0x03, 0x03, 0x7f, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x7f, 0x00, 0x00, 0x00, 0x00}, // q
{0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0, 0xf0, 0xdf, 0x00, 0x00, 0x00, 0x00}, // r
{0x00, 0x00, 0xfe, 0x03, 0x03, 0x7e, 0xc0, 0xc0, 0x7f, 0x00, 0x00, 0x00, 0x00}, // s
{0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18}, // t
{0x00, 0x00, 0x7f, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00}, // u
{0x00, 0x00, 0x18, 0x3c, 0x66, 0x66, 0xc3, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00}, // v
{0x00, 0x00, 0x66, 0x7e, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0x00, 0x00, 0x00, 0x00}, // w
{0x00, 0x00, 0xc3, 0xe7, 0x3c, 0x18, 0x3c, 0xe7, 0xc3, 0x00, 0x00, 0x00, 0x00}, // x
{0x7f, 0x03, 0x7f, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00}, // y
{0x00, 0x00, 0xff, 0xc0, 0x70, 0x1c, 0x06, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00}, // z
};

// Numbers and more (same section of ASCII)
GLubyte numletters[][13] = {
{0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3c}, // 0
{0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x38, 0x18}, // 1
{0x00, 0x00, 0x7e, 0x60, 0x60, 0x60, 0x60, 0x3c, 0x06, 0x06, 0x66, 0x66, 0x3c}, // 2
{0x00, 0x00, 0x3c, 0x66, 0x06, 0x06, 0x06, 0x1c, 0x06, 0x06, 0x06, 0x66, 0x3c}, // 3
{0x00, 0x00, 0x06, 0x06, 0x06, 0x06, 0x06, 0x7f, 0x66, 0x36, 0x1e, 0x0e, 0x06}, // 4
{0x00, 0x00, 0x3c, 0x66, 0x06, 0x06, 0x06, 0x7c, 0x60, 0x60, 0x60, 0x60, 0x7e}, // 5
{0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x66, 0x3c}, // 6
{0x00, 0x00, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x1f, 0x06, 0x06, 0x06, 0x06, 0x7e}, // 7
{0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x3c}, // 8
{0x00, 0x00, 0x3c, 0x66, 0x06, 0x06, 0x06, 0x3e, 0x66, 0x66, 0x66, 0x66, 0x3c}, // 9
{0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00}, // :
{0x00, 0x00, 0x30, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00}, // ;
{0x00, 0x00, 0x06, 0x1c, 0x30, 0x60, 0x30, 0x1c, 0x06, 0x00, 0x00, 0x00, 0x00}, // <
{0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00}, // =
{0x00, 0x00, 0x60, 0x38, 0x0c, 0x06, 0x0c, 0x38, 0x60, 0x00, 0x00, 0x00, 0x00}, // >
{0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x0c, 0x06, 0x06, 0x66, 0x3c}, // ?
};

GLubyte specialletters[][13] = {
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // space
{0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18}, // !
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x24, 0x00, 0x00}, // "
{0x00, 0x00, 0x24, 0x24, 0x7e, 0x7e, 0x24, 0x7e, 0x7e, 0x24, 0x24, 0x00, 0x00}, // #
{0x00, 0x00, 0x18, 0x3c, 0x5a, 0x5a, 0x1a, 0x3c, 0x58, 0x58, 0x5a, 0x3c, 0x18}, // $
{0x00, 0x00, 0x44, 0x4a, 0x6a, 0x24, 0x30, 0x18, 0x0c, 0x24, 0x56, 0x52, 0x22}, // %

{0x00, 0x00, 0x79, 0xcf, 0xc6, 0xcf, 0x79, 0x70, 0x78, 0xcc, 0xcc, 0xcc, 0x78}, // &
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x18, 0x00, 0x00}, // '
{0x00, 0x00, 0x0c, 0x18, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x18, 0x0c}, // (
{0x00, 0x00, 0x30, 0x18, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x18, 0x30}, // )
{0x00, 0x00, 0x00, 0x00, 0x10, 0x54, 0x38, 0x54, 0x10, 0x00, 0x00, 0x00, 0x00}, // *
{0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x7c, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00}, // +
{0x00, 0x30, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // ,
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // -
{0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // .
{0x00, 0x00, 0x60, 0x60, 0x30, 0x30, 0x18, 0x18, 0x18, 0x0c, 0x0c, 0x06, 0x06}, // /
};


GLuint fontOffset;

void makeRasterFont(void)
{
   GLuint i, j;
   glPixelStorei(GL_UNPACK_ALIGNMENT, 1);

   fontOffset = glGenLists (128);
   for (i = 0,j = 'A'; i < 26; i++,j++) {
      glNewList(fontOffset + j, GL_COMPILE);
      glBitmap(8, 13, 0.0, 2.0, 10.0, 0.0, letters[i]);
      glEndList();
   }
   
   
   // Lower case
	for (i = 0,j = 'a'; i < 26; i++,j++)
	{
		glNewList(fontOffset + j, GL_COMPILE);
		glBitmap(8, 13, 0.0, 2.0, 10.0, 0.0, lowletters[i]);
		glEndList();
	}
	// Numbers and some more
	for (i = 0,j = '0'; i < 16; i++,j++)
	{
		glNewList(fontOffset + j, GL_COMPILE);
		glBitmap(8, 13, 0.0, 2.0, 10.0, 0.0, numletters[i]);
		glEndList();
	}
	// Space and some more
	for (i = 0,j = ' '; i < 16; i++,j++)
	{
		glNewList(fontOffset + j, GL_COMPILE);
		glBitmap(8, 13, 0.0, 2.0, 10.0, 0.0, specialletters[i]);
		glEndList();
	}
   
   
   
   glNewList(fontOffset + ' ', GL_COMPILE);
   glBitmap(8, 13, 0.0, 2.0, 10.0, 0.0, space);
   glEndList();
}

void init1(void)
{
   glShadeModel (GL_FLAT);
   makeRasterFont();
}

void printString(char *s)
{
   glPushAttrib (GL_LIST_BIT);
   glListBase(fontOffset);
   glCallLists(strlen(s), GL_UNSIGNED_BYTE, (GLubyte *) s);
   glPopAttrib ();
}

void drawplayerboundary(int x1,int y1,int x2,int y2)
{
	 glLineWidth(10);   
    glBegin(GL_LINE_LOOP);
   	 glColor3f(0.5f, 0.0f, 0.8f);
    glVertex2f(x1, y2);
     glVertex2f(x2, y2);
    glVertex2f(x2, y1);
    glVertex2f(x1, y1);
    glEnd();
 
}
void drawCircle(float cx, float cy, float r )
{
int num_segments =30;
	float theta = 2 * 3.1415926 / float(num_segments);
	float c = cosf(theta);//precalculate the sine and cosine
	float s = sinf(theta);
	float t;

	float x = r;//we start at angle = 0
	float y = 0;
	glBegin(GL_TRIANGLE_FAN);
	for(int i = 0; i < num_segments; i++)
	{
		glVertex2f(x + cx, y + cy);//output vertex

		//apply the rotation matrix
		t = x;
		x = c * x - s * y;
		y = s * t + c * y;
	}
	glEnd();
	 glFlush();

}



void drawRectangle(int x1,int y1,int x2,int y2)
{
 
    glBegin(GL_POLYGON);
     glVertex2f(x1, y2);
     glVertex2f(x2, y2);
    glVertex2f(x2, y1);
    glVertex2f(x1, y1);
    glEnd();
}

void createcircle (int x, int y, int radius) {
 glColor3f(0, 1, 0);
  glBegin(GL_POLYGON);
  glVertex2f(x + radius, y);
  glVertex2f(x, y + radius);

  glVertex2f(x - radius, y);
  glVertex2f(x, y - radius);
  glEnd();
}

void drawApple(int i,int j)
{

   int r =70;
	int x1,y1,x2,y2,x,y,diffj;
	int starting_j;
	diffj=j-starting_j;
	if(diffj<0)return;
	x1=diffj*70+45;
	y1=i*70+15;
	x2=(diffj+1)*70+45;
	y2=(i+1)*70+15;                            
	glColor3f(1, 0, 0);
	drawRectangle(x1+r/4,y1+r/4,x2-r/4,y2-r/4);
	createcircle (x1+(x2-x1)/2,y1+(y2-y1)/2,r/4);
}



void drawPlayer1(int i,int j,int d, int p ,int energy,int me)
{
	int x1,y1,x2,y2,x,y,diffj;
	int starting_j;
	diffj=j-starting_j;
	if(diffj<0)return;
	x1=diffj*70+45;
	y1=i*70+15;
	x2=(diffj+1)*70+45;
	y2=(i+1)*70+15;
	switch(d)
	{
		case 1: 
			 drawplayerboundary(x1+(x2-x1)/2 ,y1,x2,y2);	 

			if(p==1)
			{
			glColor3f(0.5f, 0.35f, 0.05f);
			drawRectangle(x1,y1+2*(y2-y1)/5,x1+(x2-x1)/2,y1+3*(y2-y1)/5);		
			}
						
			else
			{  
			glColor3f(1.0f, 0.0f, 1.0f); //gun bottom
			drawRectangle(x1+24,y1+2*(y2-y1)/5,x1+(x2-x1)/2,y1+3*(y2-y1)/5);		
			glColor3f(1.0f, 1.0f, 0.0f); //gun middle
			drawRectangle(x1+12,y1+2*(y2-y1)/5,x1+(x2-x1)/2-(35-24),y1+3*(y2-y1)/5);		
			glColor3f(0.5f, 0.35f, 0.05f); //gun top
			drawRectangle(x1,y1+2*(y2-y1)/5,x1+(x2-x1)/2-(35-12),y1+3*(y2-y1)/5);		
			}	
	
			if(p==1)
		        glColor3f(0, 0, 1);
			else 
			 glColor3f(0, 1, 0);
	
			
			drawRectangle(x1+(x2-x1)/2 ,y1,x2-(35-(.35*energy)),y2);
			 glColor3f(1, 0, 0);			
			drawRectangle(x1+(x2-x1)/2 +(.35*energy),y1,x2,y2);


					 glColor3f(1, 1, 0);
			 if(me)
    			drawCircle(x2-17.5,y1+(y2-y1)/2,15);	//circle

			break;

		case 2:

			 drawplayerboundary(x1,y1,x1+(x2-x1)/2,y2);	

			glColor3f(0.5f, 0.35f, 0.05f);
			drawRectangle(x1+(x2-x1)/2,y1+2*(y2-y1)/5,x2,y1+3*(y2-y1)/5);

			if(p==1)
			{glColor3f(0.5f, 0.35f, 0.05f);
			drawRectangle(x1+(x2-x1)/2,y1+2*(y2-y1)/5,x2,y1+3*(y2-y1)/5);
			}			
			else
			{  glColor3f(1.0f, 0.0f, 1.0f); //gun bottom
			drawRectangle(x1+(x2-x1)/2,y1+2*(y2-y1)/5,x2-(35-12),y1+3*(y2-y1)/5);
			 glColor3f(1.0f, 1.0f, 0.0f); // gun middle
			drawRectangle(x1+(x2-x1)/2+12,y1+2*(y2-y1)/5,x2-(35-24),y1+3*(y2-y1)/5);
			 glColor3f(0.5f, 0.35f, 0.05f);  // gun top
			drawRectangle(x1+(x2-x1)/2+24,y1+2*(y2-y1)/5,x2,y1+3*(y2-y1)/5);
			}	


			if(p==1)
		        glColor3f(0, 0, 1);
			else 
			 glColor3f(0, 1, 0);
			drawRectangle(x1+35-(.35*energy),y1,x1+(x2-x1)/2,y2);
			 glColor3f(1, 0, 0);
			drawRectangle(x1,y1,x1+(x2-x1)/2-.35*energy,y2);

					 glColor3f(1, 1, 0);
			 if(me)
    			drawCircle(x1+17.5,y1+(y2-y1)/2,15);	//circle
					 
			break;
		case 3:

		       drawplayerboundary(x1,y1,x2,y1+(y2-y1)/2);		
	
			if(p==1)
			 glColor3f(0, 0, 1);
			else 
			 glColor3f(0, 1, 0);
			 drawRectangle(x1,y1+(35-.35*energy),x2,(y1+(y2-y1)/2));
			 glColor3f(1, 0, 0);
		    
			drawRectangle(x1,y1,x2,y1+35-(.35*energy));

						 glColor3f(1, 1, 0);
						 if(me)
  			drawCircle(x1+(x2-x1)/2,y1+(y2-y1)/4,15);	//circle			
			
			
			if(p==1)
			{		 glColor3f(0.5f, 0.35f, 0.05f);
			drawRectangle(x1+2*(x2-x1)/5,y2,x1+3*(x2-x1)/5,y1+(y2-y1)/2);
			}			
			else
			{  glColor3f(1.0f, 0.0f, 1.0f); //gun bottom
			drawRectangle(x1+2*(x2-x1)/5,y2-(35-12),x1+3*(x2-x1)/5,y1+(y2-y1)/2);
			 glColor3f(1.0f, 1.0f, 0.0f);//gun middle
			drawRectangle(x1+2*(x2-x1)/5,y2-(35-24),x1+3*(x2-x1)/5,y1+(y2-y1)/2+12);
			 glColor3f(0.5f, 0.35f, 0.05f); //gun top
			drawRectangle(x1+2*(x2-x1)/5,y2,x1+3*(x2-x1)/5,y1+(y2-y1)/2+24);
			}	
			break;
		case 4:

			drawplayerboundary(x1,y1+(y2-y1)/2,x2,y2);		

			if(p==1)
			{			 glColor3f(0.5f, 0.35f, 0.05f);
			drawRectangle(x1+2*(x2-x1)/5,y1,x1+3*(x2-x1)/5,y1+(y2-y1)/2);
			}			
			else
			{  glColor3f(1.0f, 0.0f, 1.0f); //gun bottom
			drawRectangle(x1+2*(x2-x1)/5,y1+24,x1+3*(x2-x1)/5,y1+(y2-y1)/2);
			 glColor3f(1.0f, 1.0f, 0.0f); //gun middle
			drawRectangle(x1+2*(x2-x1)/5,y1+12,x1+3*(x2-x1)/5,y1+(y2-y1)/2-(35-24));
			 glColor3f(0.5f, 0.35f, 0.05f); //gun top
			drawRectangle(x1+2*(x2-x1)/5,y1,x1+3*(x2-x1)/5,y1+(y2-y1)/2-(35-12));
			}	
			
			if(p==1)
		         glColor3f(0, 0, 1);
			else 
			 glColor3f(0, 1, 0);
			drawRectangle(x1,y1+(y2-y1)/2,x2,y1+(y2-y1)/2+.35*energy);
			 glColor3f(1, 0, 0);
			drawRectangle(x1,y1+(y2-y1)/2+(.35*energy),x2,y2);


			 glColor3f(1, 1, 0);
			 if(me)
    			drawCircle(x1+(x2-x1)/2,y2-17.5,15);	//circle
			
		break;
	}
}


/* Everything above this line could be in a library 
 * that defines a font.  To make it work, you've got 
 * to call makeRasterFont() before you start making 
 * calls to printString().
 */
void display1(void)
{
   GLfloat white[3] = { 1.0, 1.0, 1.0 };
   GLfloat red[3] = { 1.0, 0.0, 0.0 };
   GLfloat green[3] = { 0.0, 1.0, 0.0 };
   GLfloat blue[3] = { 0.0, 0.0, 1.0 };

   glClear(GL_COLOR_BUFFER_BIT);
   glColor3fv(white);

   glRasterPos2i(600,750);
   glColor3fv(blue);
   printString("CSP ASSIGNMENT---4");
   
//   drawApple(600,750);
  drawRectangle(600,170,750,250); 
   
   glRasterPos2i(600,500);
   glColor3fv(red);
   printString("aLIEN INVASION ");
   printString("|¯  | | ¯  ");

   
   glColor3fv(green);
   glRasterPos2i(660,200);
   printString("PLAY");
   
   
 
   
   glRasterPos2i(600,100);
   glColor3fv(white);
   printString(" SUBMITTED BY :- ");
   glRasterPos2i(550,70);
   printString("ABHISHEK GUPTA 2012MCS2825");
   glRasterPos2i(550,40);
   printString("SOURABH MANGAL 2012MCS2847");

   glFlush ();

}

void reshape(int w, int h)
{
   glViewport(0, 0, (GLsizei) w, (GLsizei) h);
   glMatrixMode(GL_PROJECTION);
   glLoadIdentity();
   glOrtho (0.0, w, 0.0, h, -1.0, 1.0);
   glMatrixMode(GL_MODELVIEW);
}

void keyboard(unsigned char key, int x, int y)
{
   switch (key) {
      case 27:
         exit(0);
   }
}




void display(void)
{
/*  clear all pixels  */
    glClear (GL_COLOR_BUFFER_BIT);

/*  draw white polygon (rectangle) with corners at
 *  (0.25, 0.25, 0.0) and (0.75, 0.75, 0.0)  
 */
    glColor3f (1.0, 1.0, 1.0);
/*    glBegin(GL_POLYGON);
        glVertex3f (0.25, 0.25, 0.0);
        glVertex3f (0.75, 0.25, 0.0);
        glVertex3f (0.75, 0.75, 0.0);
        glVertex3f (0.25, 0.75, 0.0);
    glEnd();
  */  
    
 glColor3f (0.0, 1.0, 0.0);
    glBegin(GL_LINES);
 glVertex2f(200, 100);
 glVertex2f(200,750);
 glEnd();
 
 glColor3f (0.0, 1.0, 0.0);
    glBegin(GL_LINES);
 glVertex2f(200, 750);
 glVertex2f(600,750);
 glEnd();
 
 glColor3f (0.0, 1.0, 0.0);
    glBegin(GL_LINES);
 glVertex2f(600,750);
 glVertex2f(600, 200);
 glEnd();
 
 glColor3f (1.0, 0.0, 0.0);
    glBegin(GL_LINES);
 glVertex2f(600,200);
 glVertex2f(800,0);
 glEnd();
 
 /*glColor3f(0.0,1.0,0.0);
glBegin(GL_LINES);
 glVertex2f(200,200);
 glVertex2f(0,0);
 glEnd();
*/
/*  don't wait!  
 *  start processing buffered OpenGL routines 
 */
    glFlush();
}

void init (void) 
{
/*  select clearing (background) color       */
    glClearColor (0.0, 0.0, 0.0, 0.0);

/*  initialize viewing values  */
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(0.0, 800, 0.0, 800, -10, 10);
}

/* 
 *  Declare initial window size, position, and display mode
 *  (single buffer and RGBA).  Open window with "hello"
 *  in its title bar.  Call initialization routines.
 *  Register callback function to display graphics.
 *  Enter main loop and process events.
 */
int main(int argc, char** argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize (800,800); 
    //glutFullScreen();
    //glutInitWindowPosition (100, 100);
    glutCreateWindow ("hello");
    init ();
    init1();
   glutReshapeFunc(reshape);
   glutKeyboardFunc(keyboard);
   
    glutDisplayFunc(display); 
   glutDisplayFunc(display1);
    glutMainLoop();
    glutSwapBuffers();
    return 0;  
    } 
